---
description: 
globs: 
alwaysApply: true
---
# Next.js Development Conventions

This project adheres to standard Next.js practices and some project-specific conventions to maintain consistency and quality.

## 1. App Router Usage

*   **Directory Structure**: Utilize the `src/app` directory for routing. Each route segment is a folder (e.g., `src/app/dashboard/settings/page.tsx`).
*   **File Conventions**: Use `page.tsx` for route UI, `layout.tsx` for shared UI, `loading.tsx` for loading UI, and `error.tsx` for error handling within segments.
*   **Server Components**: Prefer Server Components by default for performance. Fetch data directly within Server Components.
*   **Client Components**: Use Client Components (`'use client'` directive) only when necessary (e.g., for interactivity, event listeners, state, browser APIs).

## 2. Component Organization

*   **General Components**: Reusable UI components (not specific to Shadcn UI) should be placed in `src/components/`.
*   **Shadcn UI Components**: These are typically added to `src/components/ui/` by the Shadcn CLI. You can further organize them into subdirectories if needed.
*   **Feature-Specific Components**: Components used only by a specific feature or route can be co-located within that feature's directory in `src/app/` or in a dedicated subdirectory like `src/app/feature/_components/`.

## 3. State Management

*   **Local State**: Use React's `useState` and `useReducer` for component-level state.
*   **Shared State**: For state shared between components, consider:
    *   React Context for simpler cases.
    *   URL state (search params) for state that should be bookmarkable or shareable.
    *   For more complex global state, libraries like Zustand or Jotai can be introduced if needed. Avoid Redux unless the complexity genuinely demands it.

## 4. Data Fetching

*   **Server Components**: Fetch data directly in Server Components using `async/await`. Next.js extends `fetch` for caching and revalidation.
*   **Client Components**: Fetch data using libraries like SWR or React Query, or via Route Handlers if data needs to be fetched on the client after initial render.
*   **Route Handlers**: Use Route Handlers in `src/app/api/` for creating API endpoints.

## 5. Styling

*   **Tailwind CSS**: This project uses Tailwind CSS for utility-first styling. Configure it in `tailwind.config.ts`.
*   **Global Styles**: Global styles are defined in `src/app/globals.css` (or a similar file imported into the root layout).
*   **CSS Modules**: For component-scoped CSS, CSS Modules can be used if preferred over exclusively using Tailwind, but Tailwind is the primary styling method.
*   **`cn` Utility**: Use the `cn` utility from `src/lib/utils.ts` (provided by Shadcn UI) for conditionally applying Tailwind classes.

## 6. TypeScript

*   **Strict Mode**: Adhere to strict TypeScript settings defined in `tsconfig.json`.
*   **Typings**: Provide types for all props, state, and function signatures.
*   **Utility Types**: Leverage TypeScript's utility types to reduce boilerplate.

## 7. Environment Variables

*   Prefix environment variables with `NEXT_PUBLIC_` to expose them to the browser.
*   Server-side only environment variables should not have this prefix.
*   Use `.env.local` for local development, and manage environment variables appropriately for different deployment environments.

## 8. Linting and Formatting

*   **ESLint**: Configured in `eslint.config.mjs`. Run `pnpm lint` (or `yarn lint`/`npm run lint`) to check for issues.
*   **Prettier**: Configured in `.prettierrc`. Ensure code is formatted before committing.

By following these conventions, we aim for a clean, maintainable, and scalable codebase.
